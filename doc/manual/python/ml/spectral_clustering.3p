.TH "spectral clustering" "" "" "" ""
.SH NAME
.PP
spectral clustering \- A clustering algorithm commonly used in EDA
(exploratory data analysis), using the spectrum (eigenvalues) of the
similarity matrix of the data to perform clustering.
.SH SYNOPSIS
.PP
class frovedis.mllib.cluster.SpectralClustering (n_clusters=8,
eigen_solver=None, random_state=None, n_init=10, gamma=1.0,
affinity=\[aq]rbf\[aq], n_neighbors=10, eigen_tol=0.0,
assign_labels=\[aq]kmeans\[aq], degree=3, coef0=1, kernel_params=None,
n_jobs=None, verbose=0, n_iter=100, eps=0.01, n_comp=None,
norm_laplacian=True, mode=1, drop_first=False)
.SS Public Member Functions
.PP
fit(X, y=None)
.PD 0
.P
.PD
fit_predict(X)
.PD 0
.P
.PD
get_params()
.PD 0
.P
.PD
set_params(params)
.PD 0
.P
.PD
load(filename)
.PD 0
.P
.PD
get_affinity_matrix()
.PD 0
.P
.PD
save(filename)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
release()
.SH DESCRIPTION
.PP
Clustering is an unsupervised learning problem whereby we aim to group
subsets of entities with one another based on some notion of similarity.
In spectral clustering, the data points are treated as nodes of a graph.
Thus, clustering is treated as a graph partitioning problem.
The nodes are then mapped to a low\-dimensional space that can be easily
segregated to form clusters.
The components or features are identified as per column order in matrix
data.
The nodes are then mapped to a low\-dimensional space that can be easily
segregated to form clusters.
.SS Detailed Description
.SS SpectralClustering()
.PP
\f[B]Parameters\f[]
.PP
\f[B]n_clusters:\f[] An integer parameter containing the number of
required clusters.(Default: 2)
.PD 0
.P
.PD
\f[B]eigen_solver:\f[] The eigenvalue decomposition strategy to use.
AMG requires pyamg to be installed.
It can be faster on very large, sparse problems, but may also lead to
instabilities(Default: None)[Internally skipped]
.PD 0
.P
.PD
\f[B]random_state:\f[] A pseudo random number generator used for the
initialization of the lobpcg eigen vectors decomposition when
eigen_solver == \[aq]amg\[aq] and by the K\-Means
initialization.[Internally skipped]
.PD 0
.P
.PD
\f[B]n_init:\f[] An integer parameter containing the maximum number of
iteration count (Default: 100)
.PD 0
.P
.PD
\f[B]gamma:\f[] The value required for computing nearby relational
meaningful eigenvalues (Default: 1.0)
.PD 0
.P
.PD
\f[B]affinity:\f[] If a string, this may be one of
\[aq]nearest_neighbors\[aq], \[aq]precomputed\[aq] according to input
data.(Default: rbf)[Internally skipped]
.PD 0
.P
.PD
\f[B]n_neighbors:\f[] Number of neighbors to use when constructing the
affinity matrix using the nearest neighbors method.[Internally skipped]
.PD 0
.P
.PD
\f[B]eigen_tol:\f[] Stopping criterion for eigen decomposition of the
Laplacian matrix when using arpack eigen_solver.[Internally skipped]
.PD 0
.P
.PD
\f[B]assign_labels :\f[] The strategy to use to assign labels in the
embedding space.[Internally skipped]
.PD 0
.P
.PD
\f[B]degree:\f[] Degree of the polynomial kernel.
Ignored by other kernels.[Internally skipped]
.PD 0
.P
.PD
\f[B]coef0:\f[] Zero coefficient for polynomial and sigmoid
kernels.[Internally skipped]
.PD 0
.P
.PD
\f[B]kernel_params:\f[] Parameters (keyword arguments) and values for
kernel passed as callable object.[Internally skipped]
.PD 0
.P
.PD
\f[B]n_jobs:\f[] The number of parallel jobs to run.[Internally skipped]
.PD 0
.P
.PD
\f[B]verbose:\f[] An integer object specifying the log level to use.
(Default: 0)
.PD 0
.P
.PD
\f[B]n_iter:\f[] An integer parameter containing the maximum number of
iteration count for kmeans
.PD 0
.P
.PD
\f[B]eps:\f[] An double parameter containing the epsilon value for
kmeans (Default: 0.01)
.PD 0
.P
.PD
\f[B]n_comp:\f[] An integer parameter containing the number of
components for clusters (Default: 2)
.PD 0
.P
.PD
\f[B]norm_laplacian:\f[] A boolean parameter if set True, then compute
normalized Laplacian else not (Default: true)
.PD 0
.P
.PD
\f[B]mode:\f[] A parameter required to set the eigen computation method.
It can be either 1 or 3, 1 for generic and 3 for shift\-invert(Default:
1)
.PD 0
.P
.PD
\f[B]drop_first:\f[] A boolean parameter if set True, then drops the
first eigenvector.
The first eigenvector of a normalized laplacian is full of constants,
thus if drop_first is set true, compute (n_comp+1) eigenvectors and will
drop the first vector.
Otherwise it will calculate n_comp number of eigenvectors(Default:
false)
.PP
\f[B]Purpose\f[]
.PP
It clusters the given data points into a predefined number (n_clusters)
of clusters.
It simply returns "self" reference.
.PP
\f[B]Return Value\f[]
.PP
This is a non\-blocking call.
The control will return quickly, right after submitting the training
request at frovedis server side with a SpectralModel object containing a
array of labels.
.SS fit(X, y=None)
.PP
\f[B]Parameters\f[]
.PP
\f[I]X\f[]: A scipy dense matrix or any python array\-like object or an
instance of FrovedisRowmajorMatrix.
.PD 0
.P
.PD
\f[I]y\f[]: None (simply ignored in scikit\-learn as well).
.PP
\f[B]Purpose\f[]
.PP
It clusters the given data points (X) into a predefined number
(n_clusters) of clusters.
.PP
For example,
.IP
.nf
\f[C]
#\ loading\ sample\ Rowmajor\ data\ file
mat\ =\ FrovedisRowmajorMatrix().load("./sample")

#\ fitting\ input\ matrix\ on\ spectral\ object
spectral\ =\ SpectralClustering(n_clusters=2,\ verbose=2).fit(mat)\ \ \ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PP
It simply returns "self" reference.
.PD 0
.P
.PD
Note that the call will return quickly, right after submitting the fit
request at frovedis server side with a unique model ID for the fit
request.
It may be possible that the training is not completed at the frovedis
server side even though the client scikit\-learn side fit() returns.
.SS fit_predict(X, y=None)
.PP
\f[B]Parameters\f[]
.PP
\f[I]X\f[]: A scipy dense matrix or any python array\-like object or an
instance of FrovedisRowmajorMatrix.
.PP
\f[B]Purpose\f[]
.PP
It accepts the test data points (X) and returns the centroid
information.
.PP
\f[B]Return Value\f[]
.PP
It returns a numpy array of integer (int32) type containing the label
values.
.SS get_params()
.PP
\f[B]Purpose\f[]
.PP
It returns the values of parameters used for clustering.
.PP
\f[B]Return Value\f[]
.PP
It simply returns "self" instance.
.SS set_params()
.PP
\f[B]Purpose\f[]
.PP
It intialize the values of parameters the required for clustering.
.PP
\f[B]Return Value\f[]
.PP
It simply returns "self" instance.
.SS load(filename)
.PP
\f[B]Parameters\f[]
.PP
\f[I]filename\f[]: A string object containing the name of the file
having model information to be loaded.
.PP
\f[B]Purpose\f[]
.PP
It loads the model from the specified file (having little\-endian binary
data).
.PP
\f[B]Return Value\f[]
.PP
It simply returns "self" instance.
.SS get_affinity_matrix()
.PP
\f[B]Purpose\f[]
.PP
It returns the output value of the computed affinity matrix.
.PP
\f[B]Return Value\f[]
.PP
It returns FrovedisRowmajorMatrix instance.
.SS save(filename)
.PP
\f[B]Parameters\f[]
.PP
\f[I]filename\f[]: A string object containing the name of the file on
which the target model is to be saved.
.PP
\f[B]Purpose\f[]
.PP
On success, it writes the model information in the specified file as
little\-endian binary data.
Otherwise, it throws an exception.
.PP
\f[B]Return Value\f[]
.PP
It returns nothing.
.SS debug_print()
.PP
\f[B]Purpose\f[]
.PP
It shows the target model information on the server side user terminal.
It is mainly used for debugging purpose.
.PP
\f[B]Return Value\f[]
.PP
It returns nothing.
.SS release()
.PP
\f[B]Purpose\f[]
.PP
It can be used to release the in\-memory model at frovedis server.
.PP
\f[B]Return Value\f[]
.PP
It returns nothing.
