.TH "kmeans" "" "" "" ""
.SH NAME
.PP
kmeans \- A clustering algorithm commonly used in EDA (exploratory data
analysis).
.SH SYNOPSIS
.PP
class frovedis.mllib.cluster.KMeans (n_clusters=8,
init=\[aq]k\-means++\[aq],
.PD 0
.P
.PD
\  \ \  \  \  \ n_init=10, max_iter=300, tol=1e\-4,
precompute_distances=\[aq]auto\[aq],
.PD 0
.P
.PD
\  \ \  \  \  \ verbose=0, random_state=None, copy_x=True,
.PD 0
.P
.PD
\  \ \  \  \  \ n_jobs=1, algorithm=\[aq]auto\[aq])
.SS Public Member Functions
.PP
fit(X, y=None)
.PD 0
.P
.PD
predict(X)
.PD 0
.P
.PD
save(filename)
.PD 0
.P
.PD
load(filename)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
release()
.SH DESCRIPTION
.PP
Clustering is an unsupervised learning problem whereby we aim to group
subsets of entities with one another based on some notion of similarity.
K\-means is one of the most commonly used clustering algorithms that
clusters the data points into a predefined number of clusters (K).
.PP
This module provides a client\-server implementation, where the client
application is a normal python scikit\-learn program.
Scikit\-learn has its own cluster module providing kmeans support.
But that algorithm is non\-distributed in nature.
Hence it is slower when comparing with the equivalent Frovedis algorithm
(see frovedis manual for ml/kmeans) with big dataset.
Thus in this implementation, a scikit\-learn client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the scikit\-learn ML call is linked with the respective frovedis ML call
to get the job done at frovedis server.
.PP
Scikit\-learn side call for kmeans quickly returns, right after
submitting the training request to the frovedis server with a unique
model ID for the submitted training request.
.PP
When operations like prediction will be required on the trained model,
scikit\-learn client sends the same request to frovedis server on the
same model (containing the unique ID) and the request is served at
frovedis server and output is sent back to the scikit\-learn client.
.SS Detailed Description
.SS KMeans()
.PP
\f[B]Parameters\f[] \f[I]n_clusters\f[]: An integer parameter specifying
the number of clusters.
(Default: 8)
.PD 0
.P
.PD
\f[I]init\f[]: A string object.
(unused)
.PD 0
.P
.PD
\f[I]n_init\f[]: An integer parameter.
(unused)
.PD 0
.P
.PD
\f[I]max_iter\f[]: An integer parameter specifying the maximum iteration
count.
(Default: 300)
.PD 0
.P
.PD
\f[I]tol\f[]: A double parameter specifying the convergence tolerance.
(Default: 1e\-4)
.PD 0
.P
.PD
\f[I]precompute_distances\f[]: A string object.
(unused)
.PD 0
.P
.PD
\f[I]verbose\f[]: An integer object specifying the log level to use.
(Default: 0)
.PD 0
.P
.PD
\f[I]random_state\f[]: An integer, None or RandomState instance.
(unused)
.PD 0
.P
.PD
\f[I]copy_X\f[]: A boolean parameter.
(unused)
.PD 0
.P
.PD
\f[I]n_jobs\f[]: An integer parameter.
(unused)
.PD 0
.P
.PD
\f[I]algorithm\f[]: A string object.
(unused)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It initialized a KMeans object with the given parameters.
.PP
The parameters: "init", "n_init", "precompute_distances",
"random_state", "copy_X", "n_jobs" and "algorithms" are not yet
supported at frovedis side.
Thus they don\[aq]t have any significance in this call.
They are simply provided for the compatibility with scikit\-learn
application.
.PP
"verbose" value is set at 0 by default.
But it can be set to 1 (for DEBUG mode) or 2 (for TRACE mode) for
getting training time logs from frovedis server.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS fit(X, y=None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]X\f[]: A scipy sparse matrix or any python array\-like object or an
instance of FrovedisCRSMatrix.
.PD 0
.P
.PD
\f[I]y\f[]: None (simply ignored in scikit\-learn as well).
.PP
\f[B]Purpose\f[]
.PP
It clusters the given data points (X) into a predefined number (k) of
clusters.
.PP
For example,
.IP
.nf
\f[C]
#\ loading\ sample\ CRS\ data\ file
mat\ =\ FrovedisCRSMatrix().load("./sample")

#\ fitting\ input\ matrix\ on\ kmeans\ object
kmeans\ =\ KMeans(n_clusters=2,\ verbose=2).fit(mat)\ \ \ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.PD 0
.P
.PD
Note that the call will return quickly, right after submitting the fit
request at frovedis server side with a unique model ID for the fit
request.
It may be possible that the training is not completed at the frovedis
server side even though the client scikit\-learn side fit() returns.
.SS predict(X)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]X\f[]: A scipy sparse matrix or any python array\-like object or an
instance of FrovedisCRSMatrix.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It accepts the test data points (X) and returns the centroid
information.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a numpy array of integer (int32) type containing the centroid
values.
.SS save(filename)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]filename\f[]: A string object containing the name of the file on
which the target model is to be saved.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
On success, it writes the model information in the specified file as
little\-endian binary data.
Otherwise, it throws an exception.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS load(filename)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]filename\f[]: A string object containing the name of the file
having model information to be loaded.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It loads the model from the specified file (having little\-endian binary
data).
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" instance.
.SS debug_print()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It shows the target model information on the server side user terminal.
It is mainly used for debugging purpose.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS release()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to release the in\-memory model at frovedis server.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
